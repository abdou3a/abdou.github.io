version: '3.8'

services:  # PostgreSQL Database  postgres:    image: postgres:15-alpine    container_name: osint-ai-postgres    environment:      POSTGRES_DB: osint_ai_db      POSTGRES_USER: osint_user      POSTGRES_PASSWORD: osint_pass    volumes:      - postgres_data:/var/lib/postgresql/data      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql    ports:      - "5432:5432"    networks:      - osint-ai-network    restart: unless-stopped    healthcheck:      test: ["CMD-SHELL", "pg_isready -U osint_user -d osint_ai_db"]      interval: 30s      timeout: 10s      retries: 3  # Redis Cache  redis:    image: redis:7-alpine    container_name: osint-ai-redis    command: redis-server --appendonly yes --requirepass redis_password    volumes:      - redis_data:/data    ports:      - "6379:6379"    networks:      - osint-ai-network    restart: unless-stopped    healthcheck:      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]      interval: 30s      timeout: 10s      retries: 3  # Backend API  backend:    build:      context: .      dockerfile: Dockerfile.backend    container_name: osint-ai-backend
    environment:
      - DATABASE_URL=postgresql://osint_user:osint_pass@postgres:5432/osint_ai_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - osint-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: osint-ai-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - osint-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: osint-ai-celery-worker
    command: celery -A tasks worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://osint_user:osint_pass@postgres:5432/osint_ai_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - osint-ai-network
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: osint-ai-celery-beat
    command: celery -A tasks beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=postgresql://osint_user:osint_pass@postgres:5432/osint_ai_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
    volumes:
      - ./backend:/app
      - logs_data:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - osint-ai-network
    restart: unless-stopped

  # Nginx Reverse Proxy (production)
  nginx:
    image: nginx:alpine
    container_name: osint-ai-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - osint-ai-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: osint-ai-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - osint-ai-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: osint-ai-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - osint-ai-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  osint-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
